{"version":3,"sources":["webpack:///./src/components/PostTag/PostTag.jsx","webpack:///./src/templates/Tag/Tags.jsx","webpack:///./src/templates/tags.jsx"],"names":["StyledLink","Link","StyledDiv","PostTag","props","to","kebabCase","tag","sx","border","borderColor","borderRadius","backgroundColor","color","undefined","count","lineHeight","StyledTitle","StyledTagsList","StyledTagItem","Tags","tags","data","activeTag","SEO","title","isBlogPost","map","key","fieldValue","totalCount","TagsWrapper","pageContext"],"mappings":"yMAOMA,G,UAAa,YAAOC,OAAP,qBAAH,2KAWVC,EAAS,0OAaA,SAASC,EAAQC,GAC9B,OACE,YAACJ,EAAD,CACEK,GAAE,SAAWC,IAAUF,EAAMG,KAC7BC,GAAI,CACFC,OAAQ,YACRC,YAAa,WACbC,aAAc,EACdC,gBAAiB,aACjBC,MAAO,WACP,UAAW,CACTA,MAAO,UACPH,YAAa,aAIhBN,EAAMG,SACUO,IAAhBV,EAAMW,OACL,YAACb,EAAD,CACEM,GAAI,CACFK,MAAO,QACPD,gBAAiB,YAGnB,iBACEJ,GAAI,CACFQ,WAAY,UAGbZ,EAAMW,W,mHCtDbE,EAAW,kGAKXC,EAAc,oHAMdC,EAAa,0GAMJ,SAASC,EAAKhB,GAAQ,IAC3BiB,EAASjB,EAAMkB,KAAfD,KACR,OACE,YAAC,IAAD,CAAQE,UAAW,QACjB,YAACC,EAAA,EAAD,CAAKC,MAAM,OAAOC,YAAY,IAC9B,YAACT,EAAD,oBACA,YAACC,EAAD,KACGG,EAAKM,KAAI,SAACpB,GAAD,OACR,YAACY,EAAD,CAAeS,IAAKrB,EAAIsB,YACtB,YAAC,IAAD,CAAKd,MAAOR,EAAIuB,WAAYvB,IAAKA,EAAIsB,mBCdlCE,UAbK,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAH,OAAqB,YAACZ,EAAD,CAAME,KAAMU","file":"component---src-templates-tags-jsx-a85615f6b9a3b1f4a253.js","sourcesContent":["/**@jsx jsx */\nimport { jsx } from 'theme-ui';\nimport React from 'react';\nimport styled from '@emotion/styled';\nimport kebabCase from 'lodash/kebabCase';\nimport { Link } from 'gatsby';\n\nconst StyledLink = styled(Link)`\n  display: flex;\n  flex-flow: row wrap;\n  align-items: center;\n  height: 25px;\n  text-align: center;\n  padding: 0 10px;\n  transition: color 100ms ease-out;\n  font-size: 14px;\n`;\n\nconst StyledDiv = styled.div`\n  margin-left: 5px;\n  display: inline-block;\n  height: 16px;\n  text-align: center;\n  min-width: 25px;\n  padding-left: 2px;\n  padding-right: 2px;\n  font-size: 12px;\n  font-weight: bold;\n  border-radius: 1rem;\n`;\n\nexport default function PostTag(props) {\n  return (\n    <StyledLink\n      to={`/tags/${kebabCase(props.tag)}`}\n      sx={{\n        border: '1px solid',\n        borderColor: 'offblack',\n        borderRadius: 1,\n        backgroundColor: 'background',\n        color: 'offblack',\n        '&:hover': {\n          color: 'primary',\n          borderColor: 'primary',\n        },\n      }}\n    >\n      {props.tag}\n      {props.count !== undefined && (\n        <StyledDiv\n          sx={{\n            color: 'white',\n            backgroundColor: 'primary',\n          }}\n        >\n          <p\n            sx={{\n              lineHeight: 'dense',\n            }}\n          >\n            {props.count}\n          </p>\n        </StyledDiv>\n      )}\n    </StyledLink>\n  );\n}\n","import React, { Fragment, Component } from 'react';\nimport Tag from '../../components/PostTag/PostTag';\nimport Layout from '../../layout/Home';\nimport styled from '@emotion/styled';\nimport SEO from '../../components/SEO/SEO';\n\nconst StyledTitle = styled.p`\n  font-size: 24px;\n  font-weight: bold;\n`;\n\nconst StyledTagsList = styled.ul`\n  padding-top: 1rem;\n  display: flex;\n  flex-flow: row wrap;\n`;\n\nconst StyledTagItem = styled.li`\n  margin: 0.3em;\n  flex-grow: 0;\n  flex-shrink: 0;\n`;\n\nexport default function Tags(props) {\n  const { tags } = props.data;\n  return (\n    <Layout activeTag={'tags'}>\n      <SEO title=\"Tags\" isBlogPost={false} />\n      <StyledTitle>All Tags ðŸ“Œ</StyledTitle>\n      <StyledTagsList>\n        {tags.map((tag) => (\n          <StyledTagItem key={tag.fieldValue}>\n            <Tag count={tag.totalCount} tag={tag.fieldValue} />\n          </StyledTagItem>\n        ))}\n      </StyledTagsList>\n    </Layout>\n  );\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Tags from './Tag/Tags';\n\n// gatsbyv2 pathContext change to pageContext https://github.com/gatsbyjs/gatsby/issues/1456\nconst TagsWrapper = ({ pageContext }) => <Tags data={pageContext} />;\n\nTagsWrapper.propTypes = {\n  pageContext: PropTypes.shape({\n    group: PropTypes.arrayOf(\n      PropTypes.shape({\n        fieldValue: PropTypes.string.isRequired,\n        totalCount: PropTypes.number.isRequired,\n      }).isRequired\n    ),\n  }),\n};\n\nexport default TagsWrapper;\n"],"sourceRoot":""}