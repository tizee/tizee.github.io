{"componentChunkName":"component---src-templates-post-jsx","path":"/post/1a9523dac03447d0b33df132aff85c6d","result":{"data":{"post":{"id":"17924395-f98f-504e-bcdb-daf38e826e20","excerpt":"TLDR UI design(optional) logical functionality Test and code Workflow UI Design Designing and styling the UI component is the easiest step…","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"UI development Workflow\",\n  \"date\": \"2020-06-08\",\n  \"category\": \"web dev\",\n  \"tags\": [\"summary\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"TLDR\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"UI design(optional)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"logical functionality\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Test and code\")), mdx(\"h2\", null, \"Workflow\"), mdx(\"h3\", null, \"UI Design\"), mdx(\"p\", null, \"Designing and styling the UI component is the easiest step before adding any functionality. We could use design tool like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Sketch\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Figma\"), \" to export the CSS code and modify it a little to fit the layout. \"), mdx(\"h3\", null, \"Logical functionality\"), mdx(\"p\", null, \"In most time we need to define the component's interactive behaviors to get a better user experience. For example, add transition animation for toggling a menu.\"), mdx(\"h3\", null, \"Test and code\"), mdx(\"p\", null, \"TDD(Test-driven development) is a good choice but I rather like writing test use cases later , which may be considered as a bad habbit.\"));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"date":"2020-06-08","title":"UI development Workflow","category":"web dev","tags":["summary"],"slug":"1a9523dac03447d0b33df132aff85c6d"},"timeToRead":1,"tableOfContents":{"items":[{"url":"#tldr","title":"TLDR"},{"url":"#workflow","title":"Workflow","items":[{"url":"#ui-design","title":"UI Design"},{"url":"#logical-functionality","title":"Logical functionality"},{"url":"#test-and-code","title":"Test and code"}]}]}}},"pageContext":{"id":"17924395-f98f-504e-bcdb-daf38e826e20","previous":{"post":{"id":"a5b7565c-5b0c-5031-bbae-b953761809ae","parent":{"id":"3c38d525-26c4-5a9f-b7d1-363320157e3c"},"excerpt":"TLDR Use  &  instead of  &&  in unix-like system. Install npm package  npm-run-all  to run parallel commands in non-unix-like system…","slug":"101aa5b53bfc855ea2b0056a9b388fba","title":"Run parallel commands in Yarn/Npm","tags":["snippet","linux"],"category":"web dev","date":"2020-06-07"}},"next":{"post":{"id":"4910e51c-b488-5a00-83e1-024739566ba6","parent":{"id":"bc1c1c3a-758a-5d86-8f65-b20d4f31f388"},"excerpt":"在这篇文章里笔者试图厘清CSS中常见的RGB和HSL的定义，以及如何通过算法实现相互变换。 CSS颜色的一点事 CSS颜色的格式有四大类:最直接的语义化颜色单词（😅我是背不了如此之多的单词)， #000 , #000000 , #000000[AA] 这样的1…","slug":"3bd6a12ccf67ef0616d1cc0e945f9e17","title":"CSS颜色的一点事","tags":["css","Chinese","algorithm","math"],"category":"web dev","date":"2020-06-09"}}}}}