{"componentChunkName":"component---src-templates-post-jsx","path":"/post/eab48d15a9e0023f89181ac597f6d405","result":{"data":{"post":{"id":"e5936c37-cbe7-55d3-9e5a-e5a08fb10db9","excerpt":"It was several days ago when I had the idea to create a library that simply convert  DOM attributes  into  React-style attributes . This…","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How I created the React-domproperty\",\n  \"date\": \"2020-07-16\",\n  \"category\": \"dev-log\",\n  \"tags\": [\"js\", \"react\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"It was several days ago when I had the idea to create a library that simply convert \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"DOM attributes\"), \" into \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"React-style attributes\"), \". This tool works as a dependency for my another tool \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/tizee/react-gensvg\"\n  }), \"React-gensvg\"), \" that generates tsx/jsx files from SVG files.\"), mdx(\"h2\", null, \"Difference between DOM and React attributes\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"In React, all DOM properties and attributes (including event handlers) should be camelCased.\")), mdx(\"p\", null, \"However, the exception is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"aria-*\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"data-*\"), \" attributes. The values of attributes are different at sometimes. The most obvious one is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"style\"), \", which is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CSS string\"), \" in DOM tag other than an Object in React.\"), mdx(\"h2\", null, \"Development\"), mdx(\"p\", null, \"At the beginning of this month, I created several fronend boilerplates for different purposes, with which could save me lots of time on configuring. The boilerplate I used for this project is \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/tizee/ts-rollup-boilerplate\"\n  }), \"ts-rollup-boilerplate\"), \". You could check it out if intrested.\"), mdx(\"h3\", null, \"Functionality\"), mdx(\"p\", null, \"This tool is basically convert DOM attributes into camelCased attributes.\\nFurthermore, custom attributes like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"custom-data\"), \" should also be bypassed by this tool.\"), mdx(\"p\", null, \"It's not hard to achieve this core functionality, only combining \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RegExp\"), \" and string method \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"replace\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// transform attributes to camelCased\\nconst reactlize = (attr)=> attr.replace(/[\\\\-\\\\:]([a-z])/g, val => val[1].toUpperCase());\\n\")), mdx(\"p\", null, \"Probably you're thinking what a silly task. Well, actually it is.\"), mdx(\"h3\", null, \"Correctness\"), mdx(\"p\", null, \"How to make sure all DOM properties and attributes, which supported by React, are able to be handeled with this tool?\"), mdx(\"p\", null, \"The solution is through reading \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"react-dom\"), \" code and \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandler\"\n  }), \"GlobalEventHandlers\"), \" on MDN.\"), mdx(\"p\", null, \"I also use \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://reactjs.org/docs/dom-elements.html\"\n  }), \"React DOM Elements\"), \" as a reference.\"), mdx(\"p\", null, \"Additionally, there are several DOM attributes are renamed in React such as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"class\"), \" is renamed to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"className\"), \", which need to be handled as a corner case.\"), mdx(\"h3\", null, \"Github repo\"), mdx(\"p\", null, \"You could check the source code \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/tizee/react-domproperty\"\n  }), \"React-domproperty\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"date":"2020-07-16","title":"How I created the React-domproperty","category":"dev-log","tags":["js","react"],"slug":"eab48d15a9e0023f89181ac597f6d405"},"timeToRead":1,"tableOfContents":{"items":[{"url":"#difference-between-dom-and-react-attributes","title":"Difference between DOM and React attributes"},{"url":"#development","title":"Development","items":[{"url":"#functionality","title":"Functionality"},{"url":"#correctness","title":"Correctness"},{"url":"#github-repo","title":"Github repo"}]}]}}},"pageContext":{"id":"e5936c37-cbe7-55d3-9e5a-e5a08fb10db9","previous":{"post":{"id":"7669a95a-eba5-5d74-97f0-fd3fdbb56689","parent":{"id":"1072641f-7c47-5b38-8256-e3a4319b6a08"},"excerpt":"主要工具 htop (需要安装）和 top 可以用以查看与管理进程。 ps 获取当前所有进程快照。 grep 配合 top 筛选特定进程 根据进程名查询 关闭进程","slug":"37ec501fbfc7c266afc6ddfc2b126756","title":"Linux进程管理","tags":["linux"],"category":"bash","date":"2020-07-15"}},"next":{"post":{"id":"333c7373-0f34-5516-b114-261cb91e2c1a","parent":{"id":"019fdbeb-1b31-53c6-abdc-0b6fdc992015"},"excerpt":"SiriWaveJS 库使用JavaScript编写，通过Web中的 canvas 复现 Apple®️ Siri waveform 。 可以通过下面⬇️的 Demo…","slug":"898f180d871034172f721c200173f369","title":"读一读SiriWaveJS的源码","tags":["js","reading","Chinese"],"category":"code study","date":"2020-07-17"}}}}}