{"componentChunkName":"component---src-templates-post-jsx","path":"/post/037d0eeb7c4a0e194483a0205f8b7d1f","result":{"data":{"post":{"id":"5b7a1289-b8ab-5f07-86ea-58f0f076e0d9","excerpt":"Restful API Here are some dummy code to illustrate restful APIs in front-end development. Here are some explanations from  restful apiâ€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Restful API and GraphQL API\",\n  \"date\": \"2019-09-25\",\n  \"category\": \"web dev\",\n  \"tags\": [\"api\", \"restful\", \"graphql\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Restful API\"), mdx(\"p\", null, \"Here are some dummy code to illustrate restful APIs in front-end development.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javaScript\"\n  }), \"const axios = require('axios')\\nconst {baseUrl} = require('./config');\\n\\nconst user = {\\n  id: 'foo',\\n  name: 'bar',\\n  data: {\\n    'itemId': '1',\\n    'itemNum': '2'\\n  }\\n}\\n// get a user by http get method\\n// like ${baseUrl}/users/1\\nasync function getUser(id){\\n  try{\\n    const res = await axios.get(`${baseUrl}/users/${id}`);\\n  }catch(err){\\n    console.error(err);\\n  }\\n  return res;\\n}\\n\\n// You can also use url parameters to filter out URI collection\\n// like ${baseUrl}/items?id=foo\\nasync function getItem(id){\\n  try{\\n    const res = await axios.get(`${baseUrl}/items`,{\\n      params:{\\n        id: id,\\n        }\\n      });\\n  }catch(err){\\n    console.error(err);\\n  }\\n  return res;\\n}\\n\\n// delete a user by http delete method\\n// the url is the same as get a user\\nasync function deleteUser(id){\\n  try{\\n    const res = await axios.delete(`${baseUrl}/users/${user.id}`);\\n  }catch(err){\\n    console.error(err);\\n  }\\n  return res;\\n}\\n\\n// modify or update a single data by http put method\\nasync function updateUser(id,newData){\\n  try{\\n    const res = await axios.put(`${baseUrl}/users/${data.id}`,{\\n      data: user.data\\n    });\\n  }catch(err){\\n    console.error(err);\\n  }\\n  return res;\\n}\\n\\n// modify or update a collection URI by http post method\\nasync function updateUser(user){\\n  try{\\n    const res = await axios.put(`${baseUrl}/users`,{\\n      data: user\\n    });\\n  }catch(err){\\n    console.error(err);\\n  }\\n  return res;\\n}\\n\\n\")), mdx(\"p\", null, \"Here are some explanations from \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://restfulapi.net/resource-naming/\"\n  }), \"restful api tutorial\"), \".\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"REST APIs use \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://en.wikipedia.org/wiki/Uniform_Resource_Identifier\"\n  }), \"Uniform Resource Identifiers\"), \" (URIs) to address resources. REST API designers should create URIs that convey a REST API\\u2019s resource model to its potential client developers. When resources are named well, an API is intuitive and easy to use. If done poorly, that same API can feel difficult to use and understand.\")), mdx(\"h3\", null, \"Restful API architecture\"), mdx(\"p\", null, \"If you are familiar with restful API, you could skip this paragraph.\"), mdx(\"p\", null, \"REST stands for representational state transfer and it's an \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"API architecture style\"), \" for web services. So if you need to follow its specification to implement your own REST APIs.\"), mdx(\"p\", null, \"I think this \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://restfulapi.net/rest-architectural-constraints/\"\n  }), \"article\"), \" is a great reference to understand RESTful APIs though some places are misleading. Hence here I derive my own understanding from it.\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"uniform interface\\nFor example, one type of resource should have only one logical URI in order to fetch it and its related or additional data.\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"You should also consider the naming conventions, links formats and data formats. Once all of these follow a certain guideline, it would help developers understand your Restful APIs.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"client and server could developed separately\\nOn the client you only need to use URIs to locate and fetch the data from the server so both client-side and server-side could be replaced or updated as long as the APIs between them are not altered.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"stateless just like http protocol\\nThe client-side should take the responsibility to manage the state of web application for users. So in this way server do not store any client context (may store some data for the sake of security)and server will treat all request as new like http protocol.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"cacheable\\nCaching data could improve the performance on both client side and server side. Client could have better loading performance. Server could improve its scalability as requests for data have been reduced.\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"The caching could be applied on client or server side.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"layered system\\nFor example, you could store your data on server A, and deploy the restful APIs on server B and authenticate requests on server C.\\nSo a request that sent on the client side could pass through many layers along the way to fetch the data.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"You could return code like web widget\\nFor example, developer could use \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://developer.twitter.com/en/docs/twitter-for-websites/embedded-tweets/overview\"\n  }), \"twitter's API\"), \" to fetch code for embedded tweet. And I have talk about how to embed UI widget in gatsby in  my previous post.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"It's ok to violate some of rules\\nIt's recommend to follow above constraints to develop RESTful APIs but it's ok to violate some of them because we developers are human, right?\\nThe author said that there is no such terms for those APIs that only match part of above constraints.\"))), mdx(\"h3\", null, \"Restful API pros and cons\"), mdx(\"p\", null, \"pros:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"It's easy to implement and it is widely used.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Frontend and backend could develop independently\"))), mdx(\"p\", null, \"cons: (Note this is from the view of GraphQL)\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"over-fetching: download unnecessary data from one API\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"under-fetching: download part of required data so we need to request many APIs\")), mdx(\"h2\", null, \"GraphQL\"), mdx(\"p\", null, \"TLDR: when to use graphQL: rapid product iterations(UI changes rapidly)\"), mdx(\"p\", null, \"I have been using GraphQL since the first day I used \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby\"), \". Comparing it to the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"restful API\"), \" standard, it's really powerful that I could fetch anything from my disk as soon as files on my disk have been transformed into types that \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"graphQL\"), \" plugin could detect by some transformer plugin.\"), mdx(\"p\", null, \"It may bother you that what is a transformer at first but don't worry, Let's dive into the world of GraphQL and we will get to know it.\"), mdx(\"p\", null, \"BTW, both GraphQL API standard along with React are invented & open-sourced by Facebook (Hurrah\\uD83D\\uDE06)\"), mdx(\"h3\", null, \"GraphQL : graph query language\"), mdx(\"p\", null, \"GraphQL is the abbreviation of graph query language so you could refer it to other query language like SQL which is also an abbreviation of structured query language.\"), mdx(\"p\", null, \"If You are familiar with SQL, you will immediately consider that word graph is a metaphor that stands for some sort of graph structure and you're almost there\\uD83C\\uDF89.\"), mdx(\"p\", null, \"The question is how is it different with other query language. Talk is simple, show me the code.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"# graphQL syntax example\\n# this is a comment\\nquery{\\n  # an object fool has two attributes name and val\\n  foo {\\n    name\\n    val\\n  }\\n}\\n# this query script will return an object that has name and val\\n\")), mdx(\"p\", null, \"It looks so familiar, doesn't it? The first I saw this syntax what came up in my mind was JSON. BTW, there is no comment in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".json\"), \" file.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n  \\\"foo\\\":{\\n    \\\"name\\\": \\\"tizee\\\",\\n     \\\"val\\\": \\\"1\\\"\\n  }\\n}\\n\")), mdx(\"p\", null, \"The common is that they both use key-value to declare their data-format.\"), mdx(\"h3\", null, \"a query language specialized for APIs\"), mdx(\"p\", null, \"There have been already many query languages why would we need graphQL?\"), mdx(\"p\", null, \"The answer is simple. On the one hand, there are companies like netflix, coursera, github, twitter that have been using it, which means it does a great work (netflix's open source solution named as Fakor) and it has a great community. On the other hand, this is a query language designed for API.\\nIt can be combined with any languages and frameworks once graphQl has been implemented using that language.\"), mdx(\"p\", null, \"You may know the process of loading data on the website. First, you need to\"), mdx(\"h3\", null, \"GraphQL server only exposes single endpoint\"), mdx(\"p\", null, \"For example, the github has exposed graphQL API for developers and it also has the RESTful APIs.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"# github API v4: graphQL API\\n#  a single endpoint\\nhttps://api.github.com/graphql\\n\\n# github API v3: RESTful\\nhttps://developer.github.com/v3\\n\\n\")), mdx(\"h2\", null, \"graphQL application\"), mdx(\"p\", null, \"As it is just a query language, we need to use compiler as translator to tell the computer how to fetch the data from where we store it and what the data we want looks like. In other word, we need to install plugin to run GraphQL.\"), mdx(\"p\", null, \"pros:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"GraphQL API enables declarative data fetching\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"easy to use for front-end developers\"))), mdx(\"p\", null, \"cons:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Server-side caching still is a challenge with GraphQL.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Comparing with RESTful APIs, it was quite tedious to implement for backend developers especially they don't understand the schema. In short, it requires backend developers to spend sometime to learn some new frameworks\\uD83D\\uDE05.\"))), mdx(\"h2\", null, \"GraphQL syntax\"), mdx(\"h3\", null, \"Resources to learn graphQL\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.howtographql.com\"\n  }), \"how to graphQL\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://graphql.org/learn/\"\n  }), \"graphql official doc\")))));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"date":"2019-09-25","title":"Restful API and GraphQL API","category":"web dev","tags":["api","restful","graphql"],"slug":"037d0eeb7c4a0e194483a0205f8b7d1f"},"timeToRead":4,"tableOfContents":{"items":[{"url":"#restful-api","title":"Restful API","items":[{"url":"#restful-api-architecture","title":"Restful API architecture"},{"url":"#restful-api-pros-and-cons","title":"Restful API pros and cons"}]},{"url":"#graphql","title":"GraphQL","items":[{"url":"#graphql--graph-query-language","title":"GraphQL : graph query language"},{"url":"#a-query-language-specialized-for-apis","title":"a query language specialized for APIs"},{"url":"#graphql-server-only-exposes-single-endpoint","title":"GraphQL server only exposes single endpoint"}]},{"url":"#graphql-application","title":"graphQL application"},{"url":"#graphql-syntax","title":"GraphQL syntax","items":[{"url":"#resources-to-learn-graphql","title":"Resources to learn graphQL"}]}]}}},"pageContext":{"id":"5b7a1289-b8ab-5f07-86ea-58f0f076e0d9","previous":{"post":{"id":"c52084bc-cf25-5192-86b7-bb2a8d7676f9","parent":{"id":"46eb4424-f406-55d2-bb3e-c760dd7f8d46"},"excerpt":"Here are some front-end design resources that may be helpful and do not be overwhelmed on them. Links nesting components in figma front-endâ€¦","slug":"c92ebdef8c4d6d6aed549a57e277c60b","title":"Design resources","tags":["figma"],"category":"design","date":"2019-09-20"}},"next":{"post":{"id":"9c2f0df4-09a0-5981-84a3-39926397a766","parent":{"id":"090840c9-bbe3-5074-91a2-9b26d9df8f78"},"excerpt":"Have you calculated how much time you spend on reading or writing each day? Or from a longer time scale like a week or a month even a yearâ€¦","slug":"d890fd029695168ddfb96582515a3bf7","title":"Writing and reading","tags":["writing","reading","English"],"category":"thoughts","date":"2019-09-26"}}}}}