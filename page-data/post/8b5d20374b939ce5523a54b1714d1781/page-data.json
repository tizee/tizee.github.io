{"componentChunkName":"component---src-templates-post-jsx","path":"/post/8b5d20374b939ce5523a54b1714d1781","result":{"data":{"post":{"id":"27d57ff3-1ead-5b07-86a1-8360811e0d3c","excerpt":"What is CommonJS, AMD, ES6? Let's make long story short. The implementation of  ECMAScript  is known as JavaScript, which is supposed toâ€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Compare CommonJS, AMD, ES6\",\n  \"date\": \"2019-09-06\",\n  \"tags\": [\"javaScript\", \"webDev\", \"es6\", \"commonJS\", \"amd\"],\n  \"category\": \"web dev\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"What is CommonJS, AMD, ES6?\"), mdx(\"p\", null, \"Let's make long story short. The implementation of \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"\"\n  }), \"ECMAScript\"), \" is known as JavaScript, which is supposed to only used in browser before, but now it could run outside of browser in a server by a JavaScript runtime called \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"\"\n  }), \"NodeJS\"), \" based on Chrome's V8 JavaScript engine.\"), mdx(\"p\", null, \"However, comparing to the JavaScript browser runtime, the NodeJS runtime could support more modern ECMAScript features(with some syntax sugar) which are may not supported in your browser especially the old IE browser.\"), mdx(\"p\", null, \"The ES6 is an abbreviation of ECMAScript 2015 which introduce many modern features like class definition, object destructing,etc.\"), mdx(\"p\", null, \"You can read the the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://kangax.github.io/compat-table/\"\n  }), \"ECMAScript feature compatibility table\"), \" to check whether the feature is supported in your current browser.\"), mdx(\"p\", null, \"The modern web development introduce modular system which enables frontend developers to publish their plugins or install other plugin into their project.\"), mdx(\"p\", null, \"Before modular system was introduced into JavaScript, there was no direct way to create a module. You have to copy the code or files you want to reuse from one project to another project which is very tedious. You have to define a module using some tricks e.g closure.\"), mdx(\"p\", null, \"It's easy to import your module when you define your module inside just one file but once you have defined multiple modules in a single file there is no straightforward way to import module on demand. In other words, it's hard to import your modules asynchronously.\"), mdx(\"p\", null, \"So here come modern ways to deal with these JavaScript modules.They are CommonJS, AMD(asynchronous module definition), ECMAScript 2015 module(Native JavaScript module).\"), mdx(\"h2\", null, \"Compare\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"CommonJS\")), mdx(\"p\", null, \"CommonJS is a javaScript module specification which has been implemented by NodeJS and you cannot use CommonJS directly in native JavaScript in browser which requires transpiling. It uses two keywords \", mdx(\"em\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"em\"\n  }, \"exports\")), \" and \", mdx(\"em\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"em\"\n  }, \"require\")), \" to export and import modules.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"require\"), \" is a function and you need to be aware that in JavaScript world the function type is also an Object type. You can actually use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"typeof\"), \" to get its type. It's used to import functions from other modules.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"exports\"), \" is an object that used to return the functions inside it.\"), mdx(\"p\", null, \"From \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://stackoverflow.com/questions/16383795/difference-between-module-exports-and-exports-in-the-commonjs-module-system\"\n  }), \"the community's discussion\"), \", it's recommended to use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"module.exports\"), \" instead of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"exports\"), \" because \\\"\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"module\"), \" is a plain JavaScript object with an exports property. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"exports\"), \" is a plain JavaScript variable that happens to be set to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"module.exports\"), \" in nodeJS\\\". Another reason is because \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"exports\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"module.exports\"), \" are pointed to the same object. If you assign \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"exports\"), \" to something else they are not the same longer. Hence the best practice is to use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"module.exports\"), \" to avoid confusion.\"), mdx(\"p\", null, \"You need to watch out for what \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"exports\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"module.exports\"), \" point to.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javaScript\"\n  }), \"// nodejs runtime\\ntypeof require // => function\\n\\n// sayHello.js\\nfunction SayHello(){\\n  console.log(\\\"Hello\\\");\\n  return;\\n}\\n\\n// es6 arrow function\\n// CommnJS way to export module\\nexports = ()=>{\\nreturn sayHello();\\n}\\nconsole.log(exports !== module.exports) // => true\\n\\n// es6 object attribute definition syntax\\nexports = {\\n  // sayHello: sayHello()\\n  sayHello\\n}\\nconsole.log(exports !== module.exports) // => true\\n\\n// better use module.exports\\n// NodeJS's way to export module\\nmodule.exports = {\\n  sayHello\\n}\\nconsole.log(exports !== module.exports) // => true\\n\\n// Other case\\nmodule.exports.sayHello = sayHello;\\nconsole.log(exports === module.exports) // => true\\n\\n\")), mdx(\"p\", null, \"In the server side, those modules are loaded one by one according to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"require\"), \" order. In this way we could define module per file.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"AMD:Ascynchronous module definition\")), mdx(\"p\", null, \"AMD was introduced when CommonJS was not suitable for browsers (it is first implemented by NodeJS that is on server side).\"), mdx(\"p\", null, \"AMD uses keywords \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"define\"), \" which is a function to load multiple modules asynchronously.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javaScript\"\n  }), \"define(['module1', ',module2'], function(module1, module2) {\\n  // doSomthing\\n});\\n\\n// foo.js\\ndefine(['moduleA', 'moduleB'], function (moduleA, moduleB) {\\n    //    methods\\n    function a(){};    //    private\\n    function b(){};    //    public\\n\\n\\n    // public methods\\n    return {\\n        b: b,\\n    }\\n});\\n\")), mdx(\"p\", null, \"The first parameter is array of module names and the second one is a callback function that called once all modules are loaded.\"), mdx(\"p\", null, \"It's different from the CommonJS mainly because it supports asynchronous module loading.\\nAMD was also a API specification that implemented by \", mdx(\"em\", {\n    parentName: \"p\"\n  }, mdx(\"a\", _extends({\n    parentName: \"em\"\n  }, {\n    \"href\": \"https://requirejs.org\"\n  }), \"Require.js\"))), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ESCMAScript 2015 Module\"), \"\\nES6 introduce features for importing and exporting modules in both synchronous and asynchronous ways.\"), mdx(\"p\", null, \"It uses keywords \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"export\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"import\"), \" to export and import modules.\\nNow we could write something like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// a.js\\nexport const name = 'jeff';\\nexport function sayHi() {\\n  console.log('hi');\\n}\\n// b.js\\nimport { name, sayHi } from 'a';\\n\")), mdx(\"p\", null, \"By using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"import\"), \" we just bring exported modules into namespace and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"export\"), \" makes things public to outside. In other words, they are language-level keywords of which behavior are static.\"), mdx(\"p\", null, \"This enables build analyzer to build dependency map of the project. But we still need use transpliers i.e \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Babel\"), \" to translate it to older es5 syntax that old browsers support.\"), mdx(\"h2\", null, \"My feelings about JavaScript\"), mdx(\"p\", null, \"On the one hand, I believe I'm lucky not to experience those old days of JavaScript development and just stand on the shoulder of giants (NodeJS and other babel-plugins).\"), mdx(\"p\", null, \"On the other hand, I also believe that it's important to know the past of JavaScript and this would make me understand the JavaScript I used nowadays.\"), mdx(\"h2\", null, \"Deep read: some good posts\"), mdx(\"p\", null, \"There are many good posts I think are helpful to understand the concept.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://medium.com/computed-comparisons/commonjs-vs-amd-vs-requirejs-vs-es6-modules-2e814b114a0b\"\n  }), \"CommonJS VS AMD VS RequireJS VS ES6\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.davidbcalhoun.com/2014/what-is-amd-commonjs-and-umd/\"\n  }), \"What is amd CommonJs and UMD\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://medium.com/webpack/the-state-of-javascript-modules-4636d1774358\"\n  }), \"The state of JavaScript modules\"))));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"date":"2019-09-06","title":"Compare CommonJS, AMD, ES6","category":"web dev","tags":["javaScript","webDev","es6","commonJS","amd"],"slug":"8b5d20374b939ce5523a54b1714d1781"},"timeToRead":3,"tableOfContents":{"items":[{"url":"#what-is-commonjs-amd-es6","title":"What is CommonJS, AMD, ES6?"},{"url":"#compare","title":"Compare"},{"url":"#my-feelings-about-javascript","title":"My feelings about JavaScript"},{"url":"#deep-read-some-good-posts","title":"Deep read: some good posts"}]}}},"pageContext":{"id":"27d57ff3-1ead-5b07-86a1-8360811e0d3c","previous":{"post":{"id":"85e7817e-490e-50f3-8029-ff9b063113b4","parent":{"id":"b5492a17-8450-54bb-b27e-d45e44cd9936"},"excerpt":"Why git In my daily life of developing, git is playing an important role.\nAs the fact you may know about, git is a  version control  toolâ€¦","slug":"03474b2410933153a89ffe769d5a720f","title":"Git cheat sheet","tags":["git","cheat sheet"],"category":"tools","date":"2019-09-05"}},"next":{"post":{"id":"ac700a18-dfd8-58af-ab38-3b691c25b86f","parent":{"id":"35e33a5c-f54f-5e2e-8501-ae447d72cfbf"},"excerpt":"Why I need to design blog's UI? If I said I'm a frontend developer but in fact I'd never implemented anyone's web UI designs or prototypesâ€¦","slug":"92f56b467c378f6a5c19ce1eeab2f031","title":"Design my blog","tags":["design"],"category":"blog","date":"2019-09-07"}}}}}