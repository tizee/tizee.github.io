{"componentChunkName":"component---src-templates-post-jsx","path":"/post/923eaa63f00067b5246729d401311427","result":{"data":{"post":{"id":"8ac29bb0-62c8-5cc9-b709-a60e05ed5e1e","excerpt":"Common options Check video metadata Transform video type Set Video fps We could adjust the video fps, decreasing the output file fps mostly…","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"ffmpeg basic usage\",\n  \"date\": \"2020-06-25\",\n  \"category\": \"snippets\",\n  \"tags\": [\"ffmpeg\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Common options\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"-an # video only\\n-vn # audio only\\n-acodec # audio decoder, value copy for copying original audio\\n-vcodec # video decoder, value copy for copying original video\\n-f # output type\\n-bf # B frame\\n-g # keyframe interval\\n-s # set height and width\\n-ss # set start 0:0:01\\n-t # set duration 0:0:02\\n-r # set rating\\n-c:v # set output video type\\n-c:a # set output audio type\\n-y # overwrite file has the same name\\n\")), mdx(\"h2\", null, \"Check video metadata\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"ffmpeg -i video.mp4\\n\")), mdx(\"h2\", null, \"Transform video type\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"# transform flv to mp4, etc\\nffmpeg -i video.flv video.mp4\\n\")), mdx(\"h2\", null, \"Set Video fps\"), mdx(\"p\", null, \"We could adjust the video fps, decreasing the output file fps mostly, when we know the fps.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"# set input video fps to adjust its total time length\\n# video default fps 25\\n# increas video speed to 2x\\n# 50fps\\nffmpeg -r 50 -i video.mp4 output.mp4\\n# decrease video speed to 1/5\\n# 5fps\\nffmpeg -r 5 -i video.mp4 output.mp4\\n\\n# set output video fps to adjust its rating\\n# e.g input video 60 fps and we only need 30fps\\nffmpeg -i video.mp4 -r 30 output.mp4\\n\")), mdx(\"h2\", null, \"Video Concatenation\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-text:title=file.txt\"\n  }), \"file 01.flv\\nfile 02.flv\\nfile 04.flv\\nfile 05.flv\\nfile 06.flv\\nfile 07.flv\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"ffmpeg -f file -i file.txt video.mp4\\n\")), mdx(\"h2\", null, \"Split video into images\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"# in default frame rate 25\\n# image name pattern: images-0001.png\\nffmpeg -i video.mp4 images-%04d.png\\n# set output frame rate\\n# image name pattern: images-000001.png\\nffmpeg -i video.mp4 -r 60 images-%06d.png\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"%06d\"), \" dictates that the ordinal number of each output image will be formed using 6 digits like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"000001\"), \".\"), mdx(\"h2\", null, \"Create thumbnails per X seconds of the video\"), mdx(\"p\", null, \"We could use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-vframes\"), \" option, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fps\"), \" video filter and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"select\"), \" video filter to achieve this.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"# output a single frame from video at specific time\\nffmpeg -i video.mp4 -ss 00:00:01 -vframes 1 image.png\\n# per second\\nffmpeg -i video.mp4 -vf fps=1 image-%06d.png\\n# per minute\\nffmpeg -i video.mp4 -vf fps=1/60 image-%06d.png\\n# per tem minutes\\nffmpeg -i video.mp4 -vf fps=1/600 image-%04.png\\n# per I-frame\\nffmpeg -i video.mp4 -vf \\\"select='eq(pict_type,PICT_TYPE_I)'\\\" -vsync vfr image-%04d.png\\n\")), mdx(\"h2\", null, \"Images into video\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"# simple way using default fps 25fpx\\nffmpeg -f image2 -i images/%06d.png -vcodec libx264 output.mp4\\n# set input images fps using -framerate\\n# set output fps and bps using -b:v\\n# e.g 8000kb/s\\nffmpeg -f image2 -framerate 30 -i %06.png -b:v 8000k output.mp4\\n\")), mdx(\"h2\", null, \"Split the audio out of video and combine\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"# only video with -vn\\nffmpeg -i input.mp4 -vn -acodec copy output.m4a\\n# only audio with -an\\nffmpeg -i input.mp4 -an -vcodec copy output-video.mp4\\n# combine\\nffmpeg -i video.mp4 -i audio.mp3 -vcoder copy -acodec copy output.mp4\\n\")), mdx(\"h2\", null, \"Reverse\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"# reverse video\\nffmpeg -i input.mp4 -vf reverse output.mp4\\n# reverse audio and video\\nffmpeg -i input.mp4 -vf reverse -af reverse output.mp4\\n\")), mdx(\"h2\", null, \"Hardware acceleration\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"# check hardware acceleration methods\\nffmpeg -hwaccels\\n# check nvidia GPU cuvid\\nffmpeg -codecs | grep cuvid\\n\")), mdx(\"h2\", null, \"Reference\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://ffmpeg.org/ffmpeg.html\"\n  }), \"ffmpeg Official DOC\"), \"\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://stackoverflow.com/questions/32043680/ffmpeg-select-frames-at-position-of-video\"\n  }), \"ffmpeg-select-frames-at-position-of-video\"), \"\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://superuser.com/questions/1044444/how-do-i-use-ffmpeg-to-split-a-video-into-images-and-then-reassemble-exactly-the\"\n  }), \"how-do-i-use-ffmpeg-to-split-a-video-into-images-and-then-reassemble-exactly-the\"), \"\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.jianshu.com/p/91727ab25227\"\n  }), \"ffmpeg\\u5E38\\u7528\\u547D\\u4EE4\")));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"date":"2020-06-25","title":"ffmpeg basic usage","category":"snippets","tags":["ffmpeg"],"slug":"923eaa63f00067b5246729d401311427"},"timeToRead":1,"tableOfContents":{"items":[{"url":"#common-options","title":"Common options"},{"url":"#check-video-metadata","title":"Check video metadata"},{"url":"#transform-video-type","title":"Transform video type"},{"url":"#set-video-fps","title":"Set Video fps"},{"url":"#video-concatenation","title":"Video Concatenation"},{"url":"#split-video-into-images","title":"Split video into images"},{"url":"#create-thumbnails-per-x-seconds-of-the-video","title":"Create thumbnails per X seconds of the video"},{"url":"#images-into-video","title":"Images into video"},{"url":"#split-the-audio-out-of-video-and-combine","title":"Split the audio out of video and combine"},{"url":"#reverse","title":"Reverse"},{"url":"#hardware-acceleration","title":"Hardware acceleration"},{"url":"#reference","title":"Reference"}]}}},"pageContext":{"id":"8ac29bb0-62c8-5cc9-b709-a60e05ed5e1e","previous":{"post":{"id":"d7a38e7f-32f5-5fab-8a5a-d532019b66f1","parent":{"id":"88eb9b8f-bc36-585b-910b-7e50cf62108a"},"excerpt":"Problem If you try to use git to clone a huge repository to figure out what's behind the scens, you will get a lot of files in the end…","slug":"fcef23292f506c7b17129f243977f158","title":"Git clone subdirectory","tags":["git"],"category":"snippets","date":"2020-06-23"}},"next":{"post":{"id":"2ad6f780-a91c-5da4-acc2-89e656f411ab","parent":{"id":"d281f87b-7e8d-54ce-974d-784f72bd5f58"},"excerpt":"…","slug":"1ffdcad86aa56ad3db73a1f991543fa4","title":"本科毕业","tags":["life","Chinese"],"category":"thoughts","date":"2020-06-29"}}}}}