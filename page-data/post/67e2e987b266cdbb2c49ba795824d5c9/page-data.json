{"componentChunkName":"component---src-templates-post-jsx","path":"/post/67e2e987b266cdbb2c49ba795824d5c9","result":{"data":{"post":{"id":"e0ba59b8-b6e4-53cd-9405-cc5a8ea726b9","excerpt":"About this post After creating my own nginx and apache configuration files for deploying local websites on raspberry pi, the learning curve…","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Setup Nginx reverse proxy for apache2 on Raspberry pi\",\n  \"date\": \"2020-03-07\",\n  \"category\": \"configs\",\n  \"tags\": [\"nginx\", \"raspberrypi\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"About this post\"), mdx(\"p\", null, \"After creating my own nginx and apache configuration files for deploying local websites on raspberry pi, the learning curve isn't so steep as I thought it would be before. Anyway, it does feel great when you accomplish what you had expected for before.\"), mdx(\"p\", null, \"If you prefer detailed tutorials about how to configure nginx, I recommond reading Nginx's official docs as there are a variety of configuration templates for different use cases. I wouldn't cover sytanx stuff in this post and you should learn it by reading the offical docs instead of reading a post that written for recording.\"), mdx(\"h3\", null, \"Why Nginx and Apache2\"), mdx(\"p\", null, \"Nginx is a web server that does a good job on proxying and supports fastCGI for php rendering. Apache is a classic and old-school web server for serving static files. \"), mdx(\"h2\", null, \"Deploy and Reverse proxy\"), mdx(\"p\", null, \"Here is my situation. I would like to proxy requests to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/public/\"), \" on port 80 to a http file server listening on a port other than 80 e.g. port 3000, proxy requests to root url on port 80 to a php website \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/spoonysonny/pi-dashboard\"\n  }), \"dashboard-pi\"), \" and proxy requests to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/blog/\"), \" to my blog deployed with Apache2 on port 8080.\"), mdx(\"h3\", null, \"Install Nginx and Apache2\"), mdx(\"p\", null, \"It doesn't matter that the raspberry pi has VRMv7 architecture as we could use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sudo apt install nginx\"), \" to auto-install suitable version. And so does to install Apache2, we could use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sudo apt install apache2\"), \". \"), mdx(\"p\", null, \"For mac, use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"brew install nginx httpd\"), \".\"), mdx(\"p\", null, \"To start Nginx and Apache2, run:\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sudo systemctl start nginx\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sudo systemctl start apache2\"), \".\"), mdx(\"h3\", null, \"Install php and php-fastCGI\"), mdx(\"p\", null, \"To install php, run:\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sudo apt install php php-fpm\"), \". \"), mdx(\"h3\", null, \"Customize my configuration\"), mdx(\"p\", null, \"The Nginx use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nginx.conf\"), \" as its configuration file under \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/etc/nginx/\"), \" on raspberry pi.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"# go nginx \\ncd /etc/nginx\\nvim nginx.conf\\n\")), mdx(\"p\", null, \"Here is the my configuration for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nginx.conf\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-nginx\"\n  }), \"user www-data;\\nworker_processes 1;\\npid /run/nginx.pid;\\ninclude /etc/nginx/modules-enabled/*.conf;\\n\\nevents {\\n    worker_connections 256;\\n    # multi_accept on;\\n}\\n\\nhttp {\\n\\n    ##\\n    # Basic Settings\\n    ##\\n\\n    sendfile on;\\n    tcp_nopush on;\\n    tcp_nodelay on;\\n    keepalive_timeout 65;\\n    types_hash_max_size 2048;\\n    # server_tokens off;\\n\\n    # server_names_hash_bucket_size 64;\\n    # server_name_in_redirect off;\\n\\n    include /etc/nginx/mime.types;\\n    default_type application/octet-stream;\\n\\n    ##\\n    # SSL Settings\\n    ##\\n\\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE\\n    ssl_prefer_server_ciphers on;\\n\\n    ##\\n    # Logging Settings\\n    ##\\n\\n    access_log /var/log/nginx/access.log;\\n    error_log /var/log/nginx/error.log;\\n\\n    ##\\n    # Gzip Settings\\n    ##\\n\\n    gzip on;\\n    gzip_disable \\\"msie6\\\";\\n\\n    gzip_vary on;\\n    gzip_proxied any;\\n    gzip_comp_level 6;\\n    gzip_buffers 16 8k;\\n    gzip_http_version 1.1;\\n    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;\\n\\n    ##\\n    # Virtual Host Configs\\n    ##\\n\\n    include /etc/nginx/conf.d/*.conf;\\n    include /etc/nginx/sites-enabled/*;\\n}\\n\\n\")), mdx(\"p\", null, \"Here is the reverse proxy configuration:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-nginx\"\n  }), \"server {\\n    listen 80 default_server;\\n    listen [::]:80 default_server;\\n\\n    root /var/www/pi-dashboard;\\n\\n    # Add index.php to the list if you are using PHP\\n    index index.html index.htm index.nginx-debian.html index.php;\\n\\n    server_name _;\\n\\n    location / {\\n        index index.html index.htm index.nginx-debian.html index.php;\\n    }\\n    location /blog/ {\\n        proxy_pass http://192.168.50.136:8080;\\n        proxy_redirect off;\\n        proxy_read_timeout 1200;\\n        proxy_send_timeout 1200;\\n        proxy_connect_timeout 75;\\n        proxy_set_header X-Real-IP $remote_addr;\\n    }\\n    \\n    location /hfs/ {\\n        proxy_pass http://192.168.50.136:3000;\\n        proxy_redirect off;\\n        proxy_read_timeout 1200;\\n        proxy_send_timeout 1200;\\n        proxy_connect_timeout 75;\\n        proxy_set_header X-Real-IP $remote_addr;\\n    }\\n\\n    # pass PHP scripts to FastCGI server\\n    location ~ \\\\.php$ {\\n        include snippets/fastcgi-php.conf;\\n    \\n        # With php-fpm (or other unix sockets):\\n        fastcgi_pass unix:/run/php/php7.3-fpm.sock;\\n        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\\n        # With php-cgi (or other tcp sockets):\\n        # fastcgi_pass 127.0.0.1:9000;\\n    }\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"date":"2020-03-07","title":"Setup Nginx reverse proxy for apache2 on Raspberry pi","category":"configs","tags":["nginx","raspberrypi"],"slug":"67e2e987b266cdbb2c49ba795824d5c9"},"timeToRead":1,"tableOfContents":{"items":[{"url":"#about-this-post","title":"About this post","items":[{"url":"#why-nginx-and-apache2","title":"Why Nginx and Apache2"}]},{"url":"#deploy-and-reverse-proxy","title":"Deploy and Reverse proxy","items":[{"url":"#install-nginx-and-apache2","title":"Install Nginx and Apache2"},{"url":"#install-php-and-php-fastcgi","title":"Install php and php-fastCGI"},{"url":"#customize-my-configuration","title":"Customize my configuration"}]}]}}},"pageContext":{"id":"e0ba59b8-b6e4-53cd-9405-cc5a8ea726b9","previous":{"post":{"id":"3bf2327c-7b7f-58a9-9ed1-17780fa0205f","parent":{"id":"25aa7610-5489-592f-bdf5-4a964f042183"},"excerpt":"This is my first post about configuration stuff. In my opinion, configuring always consumes more time than coding.  Another option for…","slug":"39718281141d7b0416200fc63d121fb5","title":"Deploy DevDocs running locally on Linux as service","tags":["Linux","Linux service","rapsberry pi"],"category":"configs","date":"2020-03-05"}},"next":{"post":{"id":"5e06e1ab-e941-58bf-a247-d1137ef38cae","parent":{"id":"3e3fd6e9-090c-5b50-a192-5089f2167fc4"},"excerpt":"Note enable SMB in Windows functions. make sure both machine with MacOS and machine with Windows connect to the same local network. (Do not…","slug":"c313244699ae2b9bb25017518095b96b","title":"Access files on Windows10 on MacOS","tags":["mac"],"category":"configs","date":"2020-03-07"}}}}}