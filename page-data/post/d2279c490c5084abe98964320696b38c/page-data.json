{"componentChunkName":"component---src-templates-post-jsx","path":"/post/d2279c490c5084abe98964320696b38c","result":{"data":{"post":{"id":"5d69b77d-1a97-5498-bafd-d220ec8abc4e","excerpt":"MVC MVC is the shorthand for Model-View-Controller and you may be familar with Java's  Spring MVC  web framework. It's a useful design…","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"MVVM and MVC\",\n  \"date\": \"2019-10-05\",\n  \"category\": \"web dev\",\n  \"tags\": [\"design patterns\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", null, \"MVC\"), mdx(\"p\", null, \"MVC is the shorthand for Model-View-Controller and you may be familar with Java's \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Spring MVC\"), \" web framework. It's a useful design pattern for modern app development.\"), mdx(\"h4\", null, \"Model\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Models\"), \" contains data information. It doesn't call or use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"View\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Controllers\"), \" directly. It's where we define business logic and ways to represent the data. And it could also contain code for retrieving data from data source like database.\"), mdx(\"h4\", null, \"View\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"View\"), \" is where users see and interact with the app.\"), mdx(\"h4\", null, \"Controller\"), mdx(\"p\", null, \"In fact, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Controllers\"), \" are the bridge between \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Models\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Views\"), \". Views call controllers and then controllers call models that required. We could call this process as data binding.\"), mdx(\"h3\", null, \"MVVM\"), mdx(\"p\", null, \"As a successor, MVVM is the shorthand for Model-View-ViewModel. As you can see, it removes the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Controller\"), \" and use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ViewModel\"), \" instead. So what is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ViewModel\"), \"?\"), mdx(\"h4\", null, \"ViewModel\"), mdx(\"p\", null, \"For instance, we could define a sort of data layer that retrieve the data the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"View\"), \" layer requires from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Model\"), \" instead of using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Controller\"), \" layer to fetch data from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Model\"), \". To achieve this, we need to create a two-way data-binding between \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"View\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ViewModel\"), \". And in fact the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ViewModel\"), \" sits below the UI layer.\"), mdx(\"p\", null, \"In \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://medium.com/@husayn.hakeem/android-by-example-mvvm-data-binding-introduction-part-1-6a7a5f388bf7\"\n  }), \"Husayn Hakeem's post\"), \", he defined that what is a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ViewModel\"), \":\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Responsible for wrapping the model and preparing observable data needed by the view. It also provides hooks for the view to pass events to the model. An important thing to keep in mind is that the View Model is not tied to the view.\")), mdx(\"p\", null, \"One of \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://stackoverflow.com/questions/667781/what-is-the-difference-between-mvc-and-mvvm\"\n  }), \"Stack Overflow's question about MVVM and MVC\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"The ViewModel ties the data model, or simply the model, to the UI, or views, of the app. It contains the logic with which to manage the data from the model and exposes the data as a set of properties to which the XAML UI, or views, can bind. For example, in a picture sharing app, the ViewModel would expose a list of albums, and for each album expose a list of pictures. The UI is agnostic of where the pictures come from and how they are retrieved. It simply knows of a set of pictures as exposed by the ViewModel and shows them to the user.\")), mdx(\"h3\", null, \"Comparations\"), mdx(\"p\", null, \"In \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://hackernoon.com/mvc-vs-mvvm-how-a-website-communicates-with-its-data-models-18553877bf7d\"\n  }), \"Z. Michael Luo's post\"), \", he said:\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"However, the MVC design pattern has its many drawbacks. For one, the use of controllers to manipulate data models creates clutter in the backend. It\\u2019s standard for each model in a database to have its own controller, so when an application scales much larger and evolves into an operation with many related models, the amount of controllers used must grow in tandem. This coupled with the natural introduction of new layers of abstraction brought on by most frameworks creates a codebase that becomes very difficult to navigate through.\")), mdx(\"p\", null, \"He noted that:\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Another popular method to connect the view to the model is through something un-creatively called a ViewModel. Unlike the controller method, the ViewModel method relies heavily on the frontend of the application.\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Unlike the MVC method, the ViewModel isn\\u2019t a controller. It instead acts as a binder that binds data between the view and model. Whereas the MVC format is specifically designed to create a separation of concerns between the model and view, the MVVM format with data-binding is designed specifically to allow the view and model to communicate directly with each other.\")), mdx(\"p\", null, \"In short, he said:\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"It\\u2019s simple and allows the view to directly communicate with the backend.\")), mdx(\"h4\", null, \"Where could we use MVVM?\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"The creator of the MVVM pattern himself, John Gossman, said that the overhead for implementing MVVM is \\u201Coverkill\\u201D for simple UI operations (Gossman). Larger applications that use the ViewModel method regularly become incredibly difficult to run. For this reason, the MVVM design pattern is used mostly for single page/function applications on the web.\")));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"date":"2019-10-05","title":"MVVM and MVC","category":"web dev","tags":["design patterns"],"slug":"d2279c490c5084abe98964320696b38c"},"timeToRead":2,"tableOfContents":{"items":[{"url":"#mvc","title":"MVC","items":[{"url":"#model","title":"Model"},{"url":"#view","title":"View"},{"url":"#controller","title":"Controller"}]},{"url":"#mvvm","title":"MVVM","items":[{"url":"#viewmodel","title":"ViewModel"}]},{"url":"#comparations","title":"Comparations","items":[{"url":"#where-could-we-use-mvvm","title":"Where could we use MVVM?"}]}]}}},"pageContext":{"id":"5d69b77d-1a97-5498-bafd-d220ec8abc4e","previous":{"post":{"id":"f8cfd52a-2e54-57fd-85c2-60ebd349f5cc","parent":{"id":"8cb8f995-40a0-502a-98b9-3bce98eacfd6"},"excerpt":"What's CSS3? The question has been in my mind for a long time. People always talk about CSS3 nowadays. I know how to use CSS/SCSS to style a…","slug":"b493557bfd780d1de25eceff9fac4df5","title":"CSS to CSS3","tags":["css"],"category":"web dev","date":"2019-10-02"}},"next":{"post":{"id":"403e84c9-e029-5d37-8639-b83ad26a5299","parent":{"id":"19d02318-14aa-566c-bf3c-e824e3666be7"},"excerpt":"DOM stands for Document Object Model and BOM stands for Browser Object Model. DOM Level 1 DOM level 1 specification is separated into…","slug":"61767c73f68a78612f055915da7f6768","title":"DOM Levels","tags":["dom"],"category":"web dev","date":"2019-10-08"}}}}}