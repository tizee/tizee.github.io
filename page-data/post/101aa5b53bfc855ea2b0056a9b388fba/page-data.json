{"componentChunkName":"component---src-templates-post-jsx","path":"/post/101aa5b53bfc855ea2b0056a9b388fba","result":{"data":{"post":{"id":"3c38d525-26c4-5a9f-b7d1-363320157e3c","excerpt":"TLDR Use  &  instead of  &&  in unix-like system. Install npm package  npm-run-all  to run parallel commands in non-unix-like system…","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Run parallel commands in Yarn/Npm\",\n  \"date\": \"2020-06-07\",\n  \"category\": \"web dev\",\n  \"tags\": [\"snippet\", \"linux\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"TLDR\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"&\"), \" instead of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"&&\"), \" in unix-like system.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Install npm package \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"npm-run-all\"), \" to run parallel commands in non-unix-like system.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"A ; B # Run A and then B, regardless of success of A\\nA && B # Run B if A succeeded\\nA || B # Run B if A failed\\nA & #Run A in background.\\n\")), mdx(\"h2\", null, \"Problem\"), mdx(\"p\", null, \"What I was trying to achieve was that running two scripts that both never exited until met errors in one NPM/Yarn command using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"&&\"), \". At first sight, it seemed work but turned out to fail. \"), mdx(\"p\", null, \"I've not been writing bash scripts for a long time. In fact, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"&&\"), \" in unix-like system bash scripts means run command in turn that only the previous command successsfully exit then it runs the next command. However, the first command works like a file watcher using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"chokidar\"), \" and the second command has to wait the first command to exit so it can't work. \"), mdx(\"h2\", null, \"Solution\"), mdx(\"p\", null, \"Now that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"&&\"), \" doesn't work, we need to find a way to run commands concurrently. It could be achieved by plugins in non-unix like system. In unix like system, changing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"&&\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"&\"), \" works.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"a & b\"), \" starts a first, moves it to background and starts b. The drawback is that the background process couldn't be exited through \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ctrl-c/ctrl-z\"), \". \"), mdx(\"h2\", null, \"Reference\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://stackoverflow.com/questions/30950032/how-can-i-run-multiple-npm-scripts-in-parallel\"\n  }), \"how-can-i-run-multiple-npm-scripts-in-parallel\"), \"\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://unix.stackexchange.com/questions/24684/confusing-use-of-and-operators\"\n  }), \"confusing-use-of-and-operators\")));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"date":"2020-06-07","title":"Run parallel commands in Yarn/Npm","category":"web dev","tags":["snippet","linux"],"slug":"101aa5b53bfc855ea2b0056a9b388fba"},"timeToRead":1,"tableOfContents":{"items":[{"url":"#tldr","title":"TLDR"},{"url":"#problem","title":"Problem"},{"url":"#solution","title":"Solution"},{"url":"#reference","title":"Reference"}]}}},"pageContext":{"id":"3c38d525-26c4-5a9f-b7d1-363320157e3c","previous":{"post":{"id":"bd1a91f8-7091-5517-bc91-f07322450e74","parent":{"id":"cd35fd5e-b853-57b8-bfa9-e5e28b676e35"},"excerpt":"…","slug":"2ab6355c46d6a89a2d35db73a34797b0","title":"锚","tags":["thought"],"category":"thoughts","date":"2020-06-03"}},"next":{"post":{"id":"d9644a9c-9b6e-5689-b78d-72c5a42d286f","parent":{"id":"17924395-f98f-504e-bcdb-daf38e826e20"},"excerpt":"TLDR UI design(optional) logical functionality Test and code Workflow UI Design Designing and styling the UI component is the easiest step…","slug":"1a9523dac03447d0b33df132aff85c6d","title":"UI development Workflow","tags":["summary"],"category":"web dev","date":"2020-06-08"}}}}}