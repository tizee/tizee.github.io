{"componentChunkName":"component---src-templates-post-jsx","path":"/post/03474b2410933153a89ffe769d5a720f","result":{"data":{"post":{"id":"b5492a17-8450-54bb-b27e-d45e44cd9936","excerpt":"Why git In my daily life of developing, git is playing an important role.\nAs the fact you may know about, git is a  version control  tool…","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Git cheat sheet\",\n  \"date\": \"2019-09-05\",\n  \"tags\": [\"git\", \"cheat sheet\"],\n  \"category\": \"tools\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Why git\"), mdx(\"p\", null, \"In my daily life of developing, git is playing an important role.\\nAs the fact you may know about, git is a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://git-scm.com/book/en/v2/Getting-Started-About-Version-Control\"\n  }), \"version control\"), \" tool .\\nIt's the first source control tool I've used (Maybe I could try some old tool later).\"), mdx(\"p\", null, \"For guys like us using git everyday, there are some commands we can't live without e.g \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git commit\"), \" or configuring in git aliases like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git cm\"), \".\"), mdx(\"p\", null, \"But this post is not supposed to teach someone who is new to git, it's recommended to know some concepts of git first before continuing. Otherwise, you need to take care of yourself through a learning curve depending how many you know about git.\"), mdx(\"p\", null, \"If you aren't familiar with git commands now, you could read the free online \\uD83D\\uDC49 \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://git-scm.com/book/en/v2\"\n  }), \"git pro\"), \" and try to use git to maintain your docs and code.\"), mdx(\"h2\", null, \"Team work commands\"), mdx(\"p\", null, \"On the one hand,commands like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git init\"), \",\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git add\"), \",\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git commit\"), \",\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git push\"), \",\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git branch\"), \",\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git merge\"), \",\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git pull\"), \",\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git checkout\"), \",\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git rebase\"), \",\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git tag\"), \",\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git log\"), \" are quite easy to master once you understand the workflow that comprised of stages or how the timeline/state of repository is changed by those commands.\"), mdx(\"p\", null, \"Here are some basic commands of git.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-git\"\n  }), \"# help doc\\ngit [command-name] --help\\n\\n# init\\ngit init\\n\\n# add file or files\\ngit add [file,...]\\n\\n# add all files (not including those from .gitignore)\\ngit add -A\\n\\n# commit with a short message\\ngit commit -m \\\"Your message\\\"\\n\\n# amend commit, this will overwrite previous commit's message and adding more changes to previous commit\\ngit commit--amend -m \\\"message\\\"\\n\\n\\n# push and create branch to remote repository\\n# and set upstream branch for local branch\\ngit push -u [remote-repo-name] [branch-name]\\n\\n# remove files from git working-tree and not delete them in the desk\\ngit rm -r --cached [some-directory]\\n\\n# delete local branch\\ngit branch -d [name]\\n\\n# delete remote branch\\ngit push -d [remote] [remote-branch]\\n\\n# merge other branch to current branch\\ngit merge [branch-name]\\n\\n\")), mdx(\"p\", null, \"On the other hand, there are some commands we may not use often especially you are not work in a team i.e \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git diff\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git blame\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git show\"), \".\"), mdx(\"p\", null, \"From my experience, the most time consuming activity about git was find files modified for a particular commit.\"), mdx(\"p\", null, \"Here are snippets from StackOverflow:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-git\"\n  }), \"# For files changed between a given SHA and your current commit:\\n\\ngit diff --name-only <starting SHA> HEAD\\n\\n# you want to include changed-but-not-yet-committed files:\\n\\ngit diff --name-only <starting SHA>\\n\\n# More generally, the following syntax will always tell you which files changed between two commits (specified by their SHAs or other names):\\nFor files changed between a given SHA and your current commit:\\n\\ngit diff --name-only <starting SHA> HEAD\\n\\n# or if you want to include changed-but-not-yet-committed files:\\n\\ngit diff --name-only <starting SHA>\\n\\n# More generally, the following syntax will always tell you which files changed between two commits (specified by their SHAs or other names):\\n\\ngit diff --name-only <commit1> <commit2>\\n\\n# Using the --name-status flag instead of --name-only is handy to get a list of files and see their modification status, such as Added or Modified\\n\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"date":"2019-09-05","title":"Git cheat sheet","category":"tools","tags":["git","cheat sheet"],"slug":"03474b2410933153a89ffe769d5a720f"},"timeToRead":1,"tableOfContents":{"items":[{"url":"#why-git","title":"Why git"},{"url":"#team-work-commands","title":"Team work commands"}]}}},"pageContext":{"id":"b5492a17-8450-54bb-b27e-d45e44cd9936","previous":null,"next":{"post":{"id":"22349c97-8f34-55dd-90bb-53c54c26b68d","parent":{"id":"27d57ff3-1ead-5b07-86a1-8360811e0d3c"},"excerpt":"What is CommonJS, AMD, ES6? Let's make long story short. The implementation of  ECMAScript  is known as JavaScript, which is supposed to…","slug":"8b5d20374b939ce5523a54b1714d1781","title":"Compare CommonJS, AMD, ES6","tags":["javaScript","webDev","es6","commonJS","amd"],"category":"web dev","date":"2019-09-06"}}}}}