{"componentChunkName":"component---src-templates-post-jsx","path":"/post/8d211daa6080bb90962905914605c5a0","result":{"data":{"post":{"id":"d7e66f55-7bed-536f-a20e-11f20bfc7239","excerpt":"Detect scroll In my opinion, there are two ways to detect scroll in page. One uses  window.addEventListener('scroll', callback)  and another…","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Scroll Observer\",\n  \"date\": \"2020-07-13\",\n  \"category\": \"fun stuff\",\n  \"tags\": [\"javascript\", \"source code\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Detect scroll\"), mdx(\"p\", null, \"In my opinion, there are two ways to detect scroll in page. One uses \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"window.addEventListener('scroll', callback)\"), \" and another is use Web API \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Intersection Observer\"), \".\"), mdx(\"h3\", null, \"The motivation of Intersection Observer\"), mdx(\"h2\", null, \"Facbook IIFE\"), mdx(\"p\", null, \"Here is a snippet from Jest website.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"/**\\n * Copyright (c) 2017-present, Facebook, Inc.\\n *\\n * This source code is licensed under the MIT license found in the\\n * LICENSE file in the root directory of this source tree.\\n */\\n\\n/* eslint-disable */\\n(function scrollSpy() {\\n  var OFFSET = 10;\\n  var timer;\\n  var headingsCache;\\n\\n  var findHeadings = function findHeadings() {\\n    return headingsCache || document.querySelectorAll('.toc-headings > li > a');\\n  };\\n\\n  var onScroll = function onScroll() {\\n    if (timer) {\\n      // throttle\\n      return;\\n    }\\n\\n    timer = setTimeout(function() {\\n      timer = null;\\n      var activeNavFound = false;\\n      var headings = findHeadings(); // toc nav anchors\\n\\n      /**\\n       * On every call, try to find header right after  <-- next header\\n       * the one whose content is on the current screen <-- highlight this\\n       */\\n\\n      for (var i = 0; i < headings.length; i++) {\\n        // headings[i] is current element\\n        // if an element is already active, then current element is not active\\n        // if no element is already active, then current element is active\\n        var currNavActive = !activeNavFound;\\n        /**\\n         * Enter the following check up only when an active nav header is not yet found\\n         * Then, check the bounding rectangle of the next header\\n         * The headers that are scrolled passed will have negative bounding rect top\\n         * So the first one with positive bounding rect top will be the nearest next header\\n         */\\n\\n        if (currNavActive && i < headings.length - 1) {\\n          var heading = headings[i + 1];\\n          var next = decodeURIComponent(heading.href.split('#')[1]);\\n          var nextHeader = document.getElementById(next);\\n\\n          if (nextHeader) {\\n            var top = nextHeader.getBoundingClientRect().top;\\n            currNavActive = top > OFFSET;\\n          } else {\\n            console.error('Can not find header element', {\\n              id: next,\\n              heading: heading,\\n            });\\n          }\\n        }\\n        /**\\n         * Stop searching once a first such header is found,\\n         * this makes sure the highlighted header is the most current one\\n         */\\n\\n        if (currNavActive) {\\n          activeNavFound = true;\\n          headings[i].classList.add('active');\\n        } else {\\n          headings[i].classList.remove('active');\\n        }\\n      }\\n    }, 100);\\n  };\\n\\n  document.addEventListener('scroll', onScroll);\\n  document.addEventListener('resize', onScroll);\\n  document.addEventListener('DOMContentLoaded', function() {\\n    // Cache the headings once the page has fully loaded.\\n    headingsCache = findHeadings();\\n    onScroll();\\n  });\\n})();\\n\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"date":"2020-07-13","title":"Scroll Observer","category":"fun stuff","tags":["javascript","source code"],"slug":"8d211daa6080bb90962905914605c5a0"},"timeToRead":1,"tableOfContents":{"items":[{"url":"#detect-scroll","title":"Detect scroll","items":[{"url":"#the-motivation-of-intersection-observer","title":"The motivation of Intersection Observer"}]},{"url":"#facbook-iife","title":"Facbook IIFE"}]}}},"pageContext":{"id":"d7e66f55-7bed-536f-a20e-11f20bfc7239","previous":{"post":{"id":"c70bd79f-0332-51c1-a714-922ba82201b2","parent":{"id":"24d9b060-af01-5b8c-9ab0-87780c37e51d"},"excerpt":"Problem Sometimes there isn't a  .d.ts  file for a imported third-party module, we have to write a type definition file for it. Or you want…","slug":"d64c0ad0aa8e22567b8f024558ebecc5","title":"Manually add typescript typing file","tags":["typescript"],"category":"web dev","date":"2020-07-12"}},"next":{"post":{"id":"7669a95a-eba5-5d74-97f0-fd3fdbb56689","parent":{"id":"1072641f-7c47-5b38-8256-e3a4319b6a08"},"excerpt":"主要工具 htop (需要安装）和 top 可以用以查看与管理进程。 ps 获取当前所有进程快照。 grep 配合 top 筛选特定进程 根据进程名查询 关闭进程","slug":"37ec501fbfc7c266afc6ddfc2b126756","title":"Linux进程管理","tags":["linux"],"category":"bash","date":"2020-07-15"}}}}}