{"version":3,"sources":["webpack:///./src/components/PostTag/PostTag.jsx","webpack:///./src/templates/Category/Category.jsx","webpack:///./src/templates/category.jsx","webpack:///./src/components/PostBox/PostBox.jsx"],"names":["StyledLink","Link","StyledDiv","PostTag","props","to","kebabCase","tag","sx","border","borderColor","borderRadius","backgroundColor","color","undefined","count","lineHeight","Category","render","category","this","data","posts","edges","totalCount","activeTag","SEO","title","isBlogPost","style","gridColumn","className","paddingBottom","map","node","key","slug","PostBox","post","textDecoration","Component","categoryQuery","CategoryWrapper","pageContext","StyledPostBox","fields","intro","tags","date","timeToRead","fontSize","fontWeight","fontStyle","backgroundSize","display","backgroundImage","backgroundRepeat","transition","paddingRight","my","paddingLeft","flexFlow","length","index"],"mappings":"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","file":"component---src-templates-category-jsx-745a671dcd8ba6e021d9.js","sourcesContent":["/**@jsx jsx */\nimport { jsx } from 'theme-ui';\nimport React from 'react';\nimport styled from '@emotion/styled';\nimport kebabCase from 'lodash/kebabCase';\nimport { Link } from 'gatsby';\n\nconst StyledLink = styled(Link)`\n  display: flex;\n  flex-flow: row wrap;\n  align-items: center;\n  height: 25px;\n  text-align: center;\n  padding: 0 10px;\n  transition: color 100ms ease-out;\n  font-size: 14px;\n`;\n\nconst StyledDiv = styled.div`\n  margin-left: 5px;\n  display: inline-block;\n  height: 16px;\n  text-align: center;\n  min-width: 25px;\n  padding-left: 2px;\n  padding-right: 2px;\n  font-size: 12px;\n  font-weight: bold;\n  border-radius: 1rem;\n`;\n\nexport default function PostTag(props) {\n  return (\n    <StyledLink\n      to={`/tags/${kebabCase(props.tag)}`}\n      sx={{\n        border: '1px solid',\n        borderColor: 'offblack',\n        borderRadius: 1,\n        backgroundColor: 'background',\n        color: 'offblack',\n        '&:hover': {\n          color: 'primary',\n          borderColor: 'primary',\n        },\n      }}\n    >\n      {props.tag}\n      {props.count !== undefined && (\n        <StyledDiv\n          sx={{\n            color: 'white',\n            backgroundColor: 'primary',\n          }}\n        >\n          <p\n            sx={{\n              lineHeight: 'dense',\n            }}\n          >\n            {props.count}\n          </p>\n        </StyledDiv>\n      )}\n    </StyledLink>\n  );\n}\n","import React, { Component } from 'react';\nimport { Link } from 'gatsby';\nimport Layout from '../../layout/Home';\nimport PostBox from '../../components/PostBox/PostBox';\nimport SEO from '../../components/SEO/SEO';\n\nexport default class Category extends Component {\n  render() {\n    const { category } = this.props;\n    const { edges, totalCount } = this.props.data.posts;\n    return (\n      <Layout activeTag={'categories'}>\n        <SEO title={category + '- Category'} isBlogPost={false} />\n        <section style={{ gridColumn: '3 / auto' }}>\n          <div className=\"tag__header\">\n            <div className=\"tag__prefix\">\n              {totalCount} post{totalCount === 1 ? '' : 's'} in category\n            </div>\n            <h1 className=\"tag__name\">{category}</h1>\n          </div>\n          <ul className=\"tag__post\" style={{ paddingBottom: '2em' }}>\n            {edges.map(({ node }) => {\n              return (\n                <li key={node.slug}>\n                  <PostBox post={node} />\n                </li>\n              );\n            })}\n          </ul>\n          <Link to=\"/categories\" style={{ color: '#3fa9f5', textDecoration: 'none' }}>\n            All categories\n          </Link>\n        </section>\n      </Layout>\n    );\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql } from 'gatsby';\nimport Category from './Category/Category';\n\nconst CategoryWrapper = ({ pageContext: { category }, data }) => (\n  <Category data={data} category={category} />\n);\n\nCategoryWrapper.propTypes = {\n  pageContext: PropTypes.shape({\n    category: PropTypes.string.isRequired,\n  }),\n  data: PropTypes.shape({\n    posts: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            title: PropTypes.string.isRequired,\n            date: PropTypes.string.isRequired,\n            excerpt: PropTypes.string.isRequired,\n            slug: PropTypes.string.isRequired,\n          }),\n        })\n      ),\n    }),\n  }),\n};\n\nexport const categoryQuery = graphql`\n  query($category: String) {\n    posts: allBlogPost(filter: { category: { in: [$category] } }) {\n      totalCount\n      edges {\n        node {\n          title\n          date(formatString: \"YYYY-MM-DD\")\n          excerpt\n          slug\n          category\n          tags\n        }\n      }\n    }\n  }\n`;\n\nexport default CategoryWrapper;\n","/**@jsx jsx */\nimport { jsx } from 'theme-ui';\nimport React from 'react';\nimport { Link } from 'gatsby';\nimport Tag from '../PostTag/PostTag';\nimport kebabCase from 'lodash/kebabCase';\nimport styled from '@emotion/styled';\n\nconst StyledPostBox = styled.div`\n  margin-top: 1rem;\n  box-shadow: 0px 4px 15px rgba(0, 0, 0, 0.15);\n  border-radius: 5px;\n  min-height: 133px;\n  padding-left: 1.6rem;\n  padding-right: 1rem;\n  padding-top: 0.5rem;\n  padding-bottom: 1.1rem;\n  display: flex;\n  flex-flow: column nowrap;\n  justify-content: space-evenly;\n  transition: all 200ms ease-in;\n  &:hover {\n    transform: translateY(-4px);\n  }\n  .row1 {\n    display: flex;\n    flex-flow: row nowrap;\n    justify-content: space-between;\n  }\n  .row2 {\n    margin-top: 0.3rem;\n    display: flex;\n    flex-flow: row nowrap;\n    justify-content: space-between;\n    align-items: center;\n  }\n  > .row3 {\n    display: flex;\n    flex-flow: column wrap;\n    justify-content: space-around;\n  }\n`;\n\nexport default function PostBox({ post }) {\n  const fields = post.fields || {};\n  const slug = post.slug || fields.slug;\n  const title = post.title || fields.title;\n  const intro = post.intro;\n  const tags = post.tags || fields.tags || [];\n  const category = post.category || fields.category || 'MISC';\n  const date = post.date || fields.date;\n  const timeToRead = post.timeToRead || null;\n  return (\n    <StyledPostBox\n      sx={{\n        backgroundColor: 'offwhite',\n      }}\n    >\n      <div className=\"row1\">\n        <div>\n          <Link\n            to={`/categories/${kebabCase(category)}`}\n            sx={{\n              fontSize: 1,\n              color: 'black',\n              fontWeight: 'semibold',\n              fontStyle: 'italic',\n              '&:hover': {\n                color: 'primary',\n              },\n            }}\n          >\n            <h3>{category}</h3>\n          </Link>\n        </div>\n        {timeToRead && (\n          <div\n            sx={{\n              fontSize: 1,\n              color: 'offblack',\n            }}\n          >\n            <p>{timeToRead} min read</p>\n          </div>\n        )}\n      </div>\n      <div className=\"row2\">\n        <Link\n          to={`/post/${slug}`}\n          sx={{\n            color: 'black',\n            fontSize: 4,\n            '&:hover>h2': {\n              backgroundSize: '77% 100%',\n            },\n            '&>h2': {\n              display: 'inline',\n              backgroundImage:\n                'linear-gradient(to bottom,transparent 50%,hsl(260, 100%, 80%) 50%,hsl(260, 100%, 80%) 85%,transparent 85%,transparent 100%)',\n              backgroundRepeat: 'no-repeat',\n              backgroundSize: '0 100%',\n              transition: '.5s cubic-bezier(.6,.04,.35,1)',\n            },\n          }}\n        >\n          <h2>{title}</h2>\n        </Link>\n        <div\n          sx={{\n            paddingRight: '0.5rem',\n            fontSize: 1,\n            color: 'offblack',\n          }}\n        >\n          <small>{date}</small>\n        </div>\n      </div>\n      <div\n        className=\"intro\"\n        sx={{\n          my: 5,\n        }}\n      >\n        {intro}\n      </div>\n      <div className=\"row3\">\n        <div>\n          <span\n            sx={{\n              color: 'offblack',\n              fontSize: 0,\n              fontWeight: 'lighter',\n            }}\n          >\n            Tags:\n          </span>\n          <ul\n            sx={{\n              paddingLeft: 1,\n              display: 'inline-flex',\n              flexFlow: 'row wrap',\n            }}\n          >\n            {tags.length > 0 &&\n              tags.map((tag, index) => {\n                return (\n                  <li\n                    key={index}\n                    sx={{\n                      paddingLeft: 1,\n                    }}\n                  >\n                    <Tag tag={tag} />\n                  </li>\n                );\n              })}\n          </ul>\n        </div>\n      </div>\n    </StyledPostBox>\n  );\n}\n"],"sourceRoot":""}